#!/usr/bin/ruby -w
require 'net/ping/tcp'
require 'net/ssh'
require 'net/scp'

# Function that executes the action corresponding to the subcommand
def perform_action(subcommand, group_or_machine, ssh_subcommand, file_list)
  # Read the hosts file and store the addresses in a hash
  hosts, is_machine = read_hosts(group_or_machine)
  if subcommand == "p"
    if group_or_machine.nil? # If no group or machine is specified, ping all machines
      ping_all(hosts, nil)
    elsif !is_machine # If a group is specified, ping all machines in the group
      ping_all(hosts, group_or_machine)
    else # If a specific machine is specified, ping that machine
      ping_machine(group_or_machine)
    end

  elsif subcommand == "s"
    if group_or_machine.nil? # If no group or machine is specified, execute the command on all machines
      ssh_all(hosts, nil, ssh_subcommand)
    elsif !is_machine # If a group is specified, execute the command on all machines in the group
      ssh_all(hosts, group_or_machine, ssh_subcommand)
    else # If a specific machine is specified, execute the command on that machine
      ssh_machine(group_or_machine, ssh_subcommand)
    end

  elsif subcommand == "c"
    if group_or_machine.nil? # If no group or machine is specified, apply the manifest on all machines
      apply_manifest_on_all(hosts, nil, file_list)
    elsif !is_machine # If a group is specified, apply the manifest on all machines in the group
      apply_manifest_on_all(hosts, group_or_machine, file_list)
    else # If a specific machine is specified, apply the manifest on that machine
      apply_manifest_on_machine(group_or_machine, file_list)
    end
  end
end

# Function that applies a manifest on a specific machine
def apply_manifest_on_machine(host, file_list)
  begin
    Net::SSH.start(host, 'a842748') do |ssh| # Connect to the host via SSH (ssh represents the connection)
      file_list.each do |file| # Iterate over the list of files
        Net::SCP.upload!(host, 'a842748', "/home/a842748/.u/manifests/#{file}", "/tmp/#{file}") # Upload the file to the host
        output = ssh.exec!("sudo puppet apply /tmp/#{file}") # Apply the manifest on the host and store the output
        puts "#{host}: #{output}" # Display the output
        ssh.exec!("rm /tmp/#{file}") # Remove the temporary file created on the host
      end
    end
  rescue => e # If an error occurs, capture and display it
    puts "Error: #{e.message}"
  end
end

# Function that applies a manifest on all machines in a group or all from the hosts file
def apply_manifest_on_all(hosts, specific_group, file_list)
  if !specific_group.nil? && !hosts.key?(specific_group) # If a group is specified and it doesn't exist, return an error
    puts "Group #{specific_group} does not exist."
    return
  end

  # Apply the manifest to all machines if no group is specified, otherwise only to the group
  machines = specific_group.nil? ? hosts.values.flatten : hosts[specific_group]
  applied_addresses = []
  machines.each do |address|
    begin
      unless applied_addresses.include?(address) # If the manifest hasn't been applied to this machine yet, apply it
        Net::SSH.start(address, 'a842748') do |ssh|
          file_list.each do |file|
            Net::SCP.upload!(address, 'a842748', "/home/a842748/.u/manifests/#{file}", "/tmp/#{file}") # Upload the file
            output = ssh.exec!("sudo puppet apply /tmp/#{file}") # Apply the manifest and capture the output
            puts "#{address}: #{output}"
            ssh.exec!("rm /tmp/#{file}")
            applied_addresses << address # Add the address to the list of applied machines
          end
        end
      end
    rescue => e
      puts "Error: #{e.message}"
    end
  end
end

# Function to execute an SSH command on all machines in a group or all from the hosts file
def ssh_all(hosts, specific_group, ssh_subcommand)
  if !specific_group.nil? && !hosts.key?(specific_group) # If a group is specified and it doesn't exist, return an error
    puts "Group #{specific_group} does not exist."
    return
  end

  # Execute the command on all machines if no group is specified, otherwise only on the group
  machines = specific_group.nil? ? hosts.values.flatten : hosts[specific_group]
  ssh_done = [] # List to track machines that have already been accessed via SSH
  machines.each do |address|
    begin
      unless ssh_done.include?(address) # If SSH hasn't been executed on this machine yet, execute it
        Net::SSH.start(address, 'a842748') do |ssh|
          output = ssh.exec!(ssh_subcommand) # Execute the command and capture the output
          puts "Success:\n#{output}"
          ssh_done << address # Add the address to the list of SSH-executed machines
        end
      end
    rescue StandardError => error # If an error occurs, capture and display it
      puts "Error on #{address}: #{error.message}"
    end
  end
end

# Function to execute an SSH command on a specific machine
def ssh_machine(host, ssh_subcommand)
  begin
    Net::SSH.start(host, 'a842748') do |ssh| # Connect to the host via SSH
      output = ssh.exec!(ssh_subcommand) # Execute the command and capture the output
      puts "Success:\n#{output}"
    end
  rescue StandardError => error # If an error occurs, capture and display it
    puts "Error: #{error.message}"
  end
end

# Function to ping all machines in a group or all from the hosts file
def ping_all(hosts, specific_group)
  if !specific_group.nil? && !hosts.key?(specific_group) # If a group is specified and it doesn't exist, return an error
    puts "Group #{specific_group} does not exist."
    return
  end

  # Ping all machines if no group is specified, otherwise only the group
  machines = specific_group.nil? ? hosts.values.flatten : hosts[specific_group]
  pinged_addresses = [] # List to track machines that have already been pinged
  machines.each do |address|
    unless pinged_addresses.include?(address) # If this address hasn't been pinged yet, ping it
      t = Net::Ping::TCP.new(address, 22, 0.02) # Ping the host via TCP on port 22 with a 0.02-second timeout
      puts "#{address}: #{t.ping? ? 'SUCCESS' : 'FAIL'}"
      pinged_addresses << address # Add the address to the list of pinged machines
    end
  end
end

# Function to ping a specific machine
def ping_machine(host)
  t = Net::Ping::TCP.new(host, 22, 0.02) # Ping the host via TCP on port 22 with a 0.02-second timeout
  if t.ping? # If the ping is successful
    puts "#{host}: SUCCESS"
  else # If the ping fails
    puts "#{host}: FAIL"
  end
end

# Function to read the hosts file and return a hash of groups and their addresses
def read_hosts(group_or_machine)
  hosts = {}
  current_group = nil # Variable to store the current group while reading the file
  is_machine = false # Variable to determine if the parameter group_or_machine is a machine or a group
  hosts_file = File.expand_path('~/.u/hosts')
  File.open(hosts_file, 'r').each_line do |line| # Open the file in read mode
    line = line.strip # Remove leading and trailing whitespace
    if line.start_with?('-') # If the line starts with '-', it's a new group
      current_group = line[1..-1] # Store the group name without the dash
      hosts[current_group] = [] # Initialize an empty list for the group's addresses
    elsif line.start_with?('+') # If the line starts with '+', include a previous group
      previous_group = line[1..-1] # Store the previous group's name
      if hosts.key?(previous_group) # Check if the previous group exists in the hosts hash
        hosts[current_group].concat(hosts[previous_group]) # Append the previous group's addresses to the current group
      end
    elsif !line.empty? # Otherwise, if the line is not empty, it's an IP address or DNS name
      if current_group # Check if a current group is defined
        hosts[current_group] << line # Add the address to the current group
        if line == group_or_machine # Check if the IP or DNS matches the group_or_machine parameter
          is_machine = true # In that case, the parameter is a machine
        end
      end
    end
  end
  return hosts, is_machine
end

# Function to display the correct usage of the program
def display_usage
  puts "Usage: u [group_or_machine] command [command_parameters]"
  puts "Available commands: p, s"
  puts "The 'c' command can be used as follows:"
  puts "u [group_or_machine] c file_list"
end

# Function to parse the script's command-line arguments
def parse_arguments(argv)
  subcommand = nil
  group_or_machine = nil
  ssh_subcommand = nil
  file_list = []

  if argv.length == 1
    if argv[0] == "p"
      subcommand = argv[0]
    elsif argv[0] == "s"
      display_usage
      exit
    end
  elsif argv.length == 2
    if argv[1] == "p"
      subcommand = argv[1]
      group_or_machine = argv[0]
    elsif argv[0] == "s"
      subcommand = argv[0]
      ssh_subcommand = argv[1]
    elsif argv[0] == "c"
      subcommand = argv[0]
      file_list = [argv[1]]
    end
  elsif argv.length >= 3
    if argv[1] == "s"
      subcommand = argv[1]
      group_or_machine = argv[0]
      ssh_subcommand = argv[2]
    elsif argv[1] == "c"
      subcommand = argv[1]
      group_or_machine = argv[0]
      file_list = argv[2..-1]
    elsif argv[0] == "c"
      subcommand = argv[0]
      file_list = argv[1..-1]
    end
  else
    display_usage
    exit
  end

  return subcommand, group_or_machine, ssh_subcommand, file_list
end

######################################
######## MAIN PROGRAM ################
######################################
# Parse the script's arguments
subcommand, group_or_machine, ssh_subcommand, file_list = parse_arguments(ARGV)
# Execute the action corresponding to the subcommand
perform_action(subcommand, group_or_machine, ssh_subcommand, file_list)
exit
